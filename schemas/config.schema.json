{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"type": "object",
	"properties": {
		"codeLogPlus.enable": {
			"type": "boolean",
			"default": true,
			"scope": "resource",
			"description": "Enable or disable the extension."
		},
		"codeLogPlus.defaultLanguage": {
			"type": "string",
			"default": "javascript",
			"enum": [
				"javascript",
				"typescript",
				"java",
				"csharp",
				"php",
				"dart",
				"python",
				"cpp",
				"ruby",
				"go",
				"kotlin",
				"swift",
				"scala",
				"lua",
				"perl",
				"elixir",
				"haskell"
			],
			"enumDescriptions": [
				"JavaScript",
				"TypeScript",
				"Java",
				"C#",
				"PHP",
				"Dart",
				"Python",
				"C++",
				"Ruby",
				"Go",
				"Kotlin",
				"Swift",
				"Scala",
				"Lua",
				"Perl",
				"Elixir",
				"Haskell"
			],
			"scope": "resource",
			"description": "Default language to be used for logging."
		},
		"codeLogPlus.logCommand": {
			"type": "string",
			"default": "",
			"scope": "resource",
			"description": "The command used for logging messages."
		},
		"codeLogPlus.isLogMessageWrapped": {
			"type": "boolean",
			"default": false,
			"scope": "resource",
			"description": "Determine whether to wrap the log message with additional formatting or markers."
		},
		"codeLogPlus.borderWrapCharacter": {
			"type": "string",
			"default": "-",
			"scope": "resource",
			"description": "Character to be used for drawing the border in log wraps. For example, an underscore (_) or an asterisk (*)"
		},
		"codeLogPlus.borderWrapLength": {
			"type": "number",
			"default": 20,
			"scope": "resource",
			"description": "Number of times the border character will be repeated to create a border line. For example, 20 to create a 20-character line."
		},
		"codeLogPlus.logMessagePrefix": {
			"type": "string",
			"default": "üîç",
			"scope": "resource",
			"description": "Prefix added at the beginning of the log message."
		},
		"codeLogPlus.useAccessibleLogs": {
			"type": "boolean",
			"default": false,
			"scope": "resource",
			"description": "Use accessible logs. If true, the extension will generate logs that are more accessible for screen readers and other assistive technologies."
		},
		"codeLogPlus.messageLogDelimiter": {
			"type": "string",
			"default": "~",
			"scope": "resource",
			"description": "Delimiter to separate different elements inside the log message (e.g., filename, line number, class, function, variable)."
		},
		"codeLogPlus.messageLogSuffix": {
			"type": "string",
			"default": ":",
			"scope": "resource",
			"description": "Suffix added at the end of the log message."
		},
		"codeLogPlus.isSemicolonRequired": {
			"type": "boolean",
			"default": true,
			"scope": "resource",
			"description": "Append a semicolon at the end of the log statement if required by the programming language."
		},
		"codeLogPlus.addEmptyLineBeforeLogMessage": {
			"type": "boolean",
			"default": false,
			"scope": "resource",
			"description": "Insert an empty line before the log message for improved readability."
		},
		"codeLogPlus.addEmptyLineAfterLog": {
			"type": "boolean",
			"default": false,
			"scope": "resource",
			"description": "Insert an empty line after the log message for improved readability."
		},
		"codeLogPlus.useSingleQuotes": {
			"type": "boolean",
			"default": false,
			"scope": "resource",
			"description": "Use single quotes instead of double quotes in the log message."
		},
		"codeLogPlus.literalOpen": {
			"type": "string",
			"default": "{",
			"scope": "resource",
			"description": "The opening character used to delimit string literals (e.g., double quotes, single quotes, backticks)."
		},
		"codeLogPlus.literalClose": {
			"type": "string",
			"default": "}",
			"scope": "resource",
			"description": "The closing character used to delimit string literals (e.g., double quotes, single quotes, backticks)."
		},
		"codeLogPlus.highlightColor": {
			"type": "string",
			"default": "#FFD700",
			"scope": "resource",
			"description": "The color used to highlight the log statements."
		},
		"codeLogPlus.highlightStyle": {
			"type": "string",
			"default": "wavy",
			"enum": ["solid", "double", "dotted", "dashed", "wavy"],
			"enumDescriptions": [
				"Solid Line",
				"Double Line",
				"Dotted Line",
				"Dashed Line",
				"Wavy Line"
			],
			"scope": "resource",
			"description": "The style used to highlight the log statements."
		},
		"codeLogPlus.customLogTemplates": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"language": {
						"type": "string",
						"enum": [
							"javascript",
							"typescript",
							"java",
							"csharp",
							"php",
							"dart",
							"python",
							"cpp",
							"ruby",
							"go",
							"kotlin",
							"swift",
							"scala",
							"lua",
							"perl",
							"elixir",
							"haskell"
						],
						"enumDescriptions": [
							"JavaScript",
							"TypeScript",
							"Java",
							"C#",
							"PHP",
							"Dart",
							"Python",
							"C++",
							"Ruby",
							"Go",
							"Kotlin",
							"Swift",
							"Scala",
							"Lua",
							"Perl",
							"Elixir",
							"Haskell"
						],
						"description": "The programming language for which this template applies (e.g., 'javascript', 'python', 'dart')."
					},
					"template": {
						"type": "string",
						"description": "The log message template. Use variables like {{{logCommand}}}, {{{logMessagePrefix}}}, {{{functionName}}}, {{{variableName}}}, etc. Example: \"{{{logCommand}}}({{{quote}}}{{{logMessagePrefix}}} {{{fileName}}}:{{{lineNumber}}} ‚Üí {{{variableName}}}{{{quote}}})\""
					}
				},
				"required": ["language", "template"]
			},
			"default": [],
			"scope": "resource",
			"description": "Custom log message templates for different languages. You can define a template per language using available variables (e.g., {{{logCommand}}}, {{{logMessagePrefix}}}, {{{functionName}}}, {{{variableName}}}, {{{fileName}}}, {{{lineNumber}}})."
		},
		"codeLogPlus.files.includedFilePatterns": {
			"type": "array",
			"default": ["**/*.{js,jsx,ts,tsx}"],
			"scope": "resource",
			"description": "File patterns included in log searching. For example, ['**/*.js', '**/*.ts', '**/*.java', '**/*.cs', '**/*.php', '**/*.py', '**/*.cpp', '**/*.rb', '**/*.go', '**/*.dart']"
		},
		"codeLogPlus.files.excludedFilePatterns": {
			"type": "array",
			"default": [
				"**/node_modules/**",
				"**/dist/**",
				"**/out/**",
				"**/build/**",
				"**/vendor/**"
			],
			"scope": "resource",
			"description": "Patterns of files to exclude from the search. These patterns are used to filter out files that should not be included in the log search results."
		},
		"codeLogPlus.files.maxSearchRecursionDepth": {
			"type": "number",
			"default": 0,
			"scope": "resource",
			"description": "Maximum recursion depth for searching files. A value of 0 means no limit. This setting controls how deep the extension will search through directories when looking for files to log."
		},
		"codeLogPlus.files.supportsHiddenFiles": {
			"type": "boolean",
			"default": true,
			"scope": "resource",
			"description": "The extension supports hidden files. If set to false, hidden files will not be included in the search results."
		},
		"codeLogPlus.files.preserveGitignoreSettings": {
			"type": "boolean",
			"default": false,
			"scope": "resource",
			"description": "If true, the extension will respect the .gitignore settings when searching for files. If false, it will ignore .gitignore settings."
		},
		"codeLogPlus.files.includeFilePath": {
			"type": "boolean",
			"default": true,
			"scope": "resource",
			"description": "Include the file path in the log message. If set to false, only the log message will be included without the file path."
		}
	}
}
